Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000 (id), 8090 (business_id), 9581 (user_id)
vi. Checkin = 493
vii. Photo = 10000 (id),  6493 (business_id)
viii. Tip = 537 (user_id), 3979 (business_id)
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
	
	SELECT * 
        FROM user 
        WHERE id = NULL OR
              name = NULL OR
              review_count = NULL OR
              yelping_since = NULL OR
              useful = NULL OR
              funny = NULL OR
              cool = NULL OR
              fans = NULL OR
              average_stars = NULL OR
              compliment_hot = NULL OR
              compliment_more = NULL OR
              compliment_profile = NULL OR
              compliment_cute = NULL OR
              compliment_list = NULL OR
              compliment_note = NULL OR
              compliment_plain = NULL OR
              compliment_cool = NULL OR
              compliment_funny = NULL OR
              compliment_writer = NULL OR
              compliment_photos = NULL;
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1.0		max:5.0		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000	avg:24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT city, SUM(review_count) as num_review
	FROM business
	GROUP BY city
	ORDER BY num_review DESC;
	
	Copy and Paste the Result Below:
	
	+-----------------+------------+
	| city            | num_review |
	+-----------------+------------+
	| Las Vegas       |      82854 |
	| Phoenix         |      34503 |
	| Toronto         |      24113 |
	| Scottsdale      |      20614 |
	| Charlotte       |      12523 |
	| Henderson       |      10871 |
	| Tempe           |      10504 |
	| Pittsburgh      |       9798 |
	| Montréal        |       9448 |
	| Chandler        |       8112 |
	| Mesa            |       6875 |
	| Gilbert         |       6380 |
	| Cleveland       |       5593 |
	| Madison         |       5265 |
	| Glendale        |       4406 |
	| Mississauga     |       3814 |
	| Edinburgh       |       2792 |
	| Peoria          |       2624 |
	| North Las Vegas |       2438 |
	| Markham         |       2352 |
	| Champaign       |       2029 |
	| Stuttgart       |       1849 |
	| Surprise        |       1520 |
	| Lakewood        |       1465 |
	| Goodyear        |       1155 |
	+-----------------+------------+
	(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars as star_rating, SUM(review_count) as count
FROM business
WHERE city = 'Avon'
GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------------+-------+
| star_rating | count |
+-------------+-------+
|         1.5 |    10 |
|         2.5 |     6 |
|         3.5 |    88 |
|         4.0 |    21 |
|         4.5 |    31 |
|         5.0 |     3 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars as star_rating, SUM(review_count) as count
FROM business
WHERE city = 'Beachwood'
GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+-------------+-------+
| star_rating | count |
+-------------+-------+
|         2.0 |     8 |
|         2.5 |     3 |
|         3.0 |    11 |
|         3.5 |     6 |
|         4.0 |    69 |
|         4.5 |    17 |
|         5.0 |    23 |
+-------------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT name, SUM(review_count) total_review
	FROM user
	GROUP BY name
	ORDER BY review_count DESC
	LIMIT 3;
		
	Copy and Paste the Result Below:
		
	+--------+--------------+
	| name   | total_review |
	+--------+--------------+
	| Nicole |         2397 |
	| Sara   |         2253 |
	| Gerald |         2034 |
	+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	SQL code:
	SELECT name, SUM(review_count) as total_review, SUM(fans) as total_fans
	FROM user
	GROUP BY name
	ORDER BY total_review DESC;

	Top 5 Answers:
	+-----------+--------------+------------+
	| name      | total_review | total_fans |
	+-----------+--------------+------------+
	| Nicole    |         2397 |        200 |
	| Sara      |         2253 |         72 |
	| Gerald    |         2034 |        256 |
	| Lisa      |         2021 |        207 |
	| Mark      |         1945 |        156 |

From the summation of reviews and fans for each user, we can observe that the number of fans does not increase with the number of reviews. There is no pattern can be found from the number of fans.
Hence, there is no correlation between number of reviews and fans.
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Yes, there are 1780 reviews with word "love" in it, compared to 232 reviews with word "hate".
	
	SQL code used to arrive at answer:
	
	SELECT
	(SELECT Count(*) FROM review WHERE text LIKE '%love%') as count_love,
	(SELECT Count(*) FROM review WHERE text LIKE '%hate%') as count_hate
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

	SELECT name, SUM(fans) as num_fans
	FROM user
	GROUP BY name
	ORDER BY num_fans DESC
	LIMIT 10;
	
	Copy and Paste the Result Below:

	+-----------+----------+
	| name      | num_fans |
	+-----------+----------+
	| Amy       |      519 |
	| Mimi      |      498 |
	| Harald    |      311 |
	| Gerald    |      256 |
	| Lisa      |      207 |
	| Nicole    |      200 |
	| Christine |      187 |
	| Mark      |      156 |
	| Jen       |      148 |
	| Linda     |      148 |
	+-----------+----------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

City: Las Vegas
Category: Food
	
i. Do the two groups you chose to analyze have a different distribution of hours?

Yes. The business with higher star rating tends to have shorter hour distribution (10am to 7pm) compared to the business with lower star rating (8am to 11pm).

ii. Do the two groups you chose to analyze have a different number of reviews?
         
Yes. The business with higher star rating tends to have more reviews (30) compared to the business with lower star rating (6).
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

No. Both business are in different locations.

+-----------------------------+-----------+----------+-------+----------------------+--------------+-----------------------------+-------------+
| name                        | city      | category | stars | hours                | review_count | address                     | postal_code |
+-----------------------------+-----------+----------+-------+----------------------+--------------+-----------------------------+-------------+
| Sweet Ruby Jane Confections | Las Vegas | Food     |   4.0 | Saturday|10:00-19:00 |           30 | 8975 S Eastern Ave, Ste 3-B | 89123       |
| Walgreens                   | Las Vegas | Food     |   2.5 | Saturday|8:00-22:00  |            6 | 3808 E Tropicana Ave        | 89121       |
+-----------------------------+-----------+----------+-------+----------------------+--------------+-----------------------------+-------------+

SQL code used for analysis:

SELECT b.name, b.city, c.category, b.stars, h.hours, b.review_count, b.address, b.postal_code
FROM (business b INNER JOIN category c ON b.id = c.business_id)
INNER JOIN hours h ON b.id = h.business_id
WHERE b.city = 'Las Vegas' AND c.category = 'Food'
GROUP BY b.name
ORDER BY b.stars DESC
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: Both opened and closed businesses has near count of average star ratings        
         
ii. Difference 2: Opened business has higher total and average review counts compared to closed business

+---------+-----------+---------------+---------------------+---------------------+
| is_open | COUNT(id) |  AVG(b.stars) | SUM(b.review_count) | AVG(b.review_count) |
+---------+-----------+---------------+---------------------+---------------------+
|       0 |      1520 | 3.52039473684 |               35261 |       23.1980263158 |
|       1 |      8480 | 3.67900943396 |              269300 |       31.7570754717 |
+---------+-----------+---------------+---------------------+---------------------+
           
SQL code used for analysis:

SELECT is_open, COUNT(id), AVG(b.stars), SUM(b.review_count), AVG(b.review_count)
FROM business b
GROUP BY b.is_open	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

The impact of attributes on the star ratings for specific business category
            
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

We would like to analyse how different attributes (e.g. credit card acceptance) affects the business star ratings on specific category (e.g. Restaurants) based on number of business and number of review counts. Hence we can check the difference of star ratings based on the implementation of that specific attribute.
                  
iii. Output of your finished dataset:

a.value = 1
+-------+--------------+--------------------+
| stars | num_business | total_review_count |
+-------+--------------+--------------------+
|   4.5 |            1 |                  7 |
|   4.0 |            7 |                820 |
|   3.5 |            5 |                234 |
|   3.0 |            5 |                367 |
|   2.5 |            3 |                 36 |
|   2.0 |            3 |                 16 |
|   1.0 |            1 |                  4 |
+-------+--------------+--------------------+

a.value = 0
+-------+--------------+--------------------+
| stars | num_business | total_review_count |
+-------+--------------+--------------------+
|   3.0 |            2 |                 53 |
+-------+--------------+--------------------+

iv. Provide the SQL code you used to create your final dataset:

SELECT b.stars,
COUNT(b.name) AS num_business,
SUM(b.review_count) AS total_review_count
FROM (business b INNER JOIN attribute a ON b.id = a.business_id)
INNER JOIN category c ON c.business_id = b.id
WHERE c.category = 'Restaurants' AND a.name = 'BusinessAcceptsCreditCards' AND a.value = 1
GROUP BY b.stars
ORDER BY b.stars DESC;